pipeline {
    agent any

    tools {
        jdk 'JDK11'
        maven 'Maven3'
        dockerTool 'Docker'
    }

    environment {
        SONARQUBE_SERVER = 'SonarQube'
        NEXUS_URL = 'http://nexus.example.com/repository/maven-releases/'
        NEXUS_CREDENTIALS = credentials('nexus-credentials-id')
        DOCKERHUB_CREDENTIALS = credentials('dockerhub-credentials-id')
        DOCKER_IMAGE = 'yourdockerhubuser/yourapp'
        HELM_CHART_PATH = 'helm-chart/'
        KUBECONFIG_CREDENTIALS = credentials('kubeconfig-credentials-id')
    }

    stages {
        stage('Clone Repository') {
            steps {
                git url: 'https://github.com/yourorg/yourrepo.git', branch: 'main'
            }
        }

        stage('Code Test') {
            steps {
                sh 'mvn test'
            }
        }

        stage('Checkstyle Report') {
            steps {
                sh 'mvn checkstyle:checkstyle'
                recordIssues tools: [checkStyle(pattern: '**/target/checkstyle-result.xml')]
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv("${SONARQUBE_SERVER}") {
                    sh 'mvn sonar:sonar'
                }
            }
        }

        stage('Quality Gate') {
            steps {
                timeout(time: 5, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }

        stage('Build & Push Artifact to Nexus') {
            steps {
                sh 'mvn clean package'
                sh """
                    mvn deploy -DaltDeploymentRepository=nexus::default::${NEXUS_URL} \
                        -Dnexus.username=${NEXUS_CREDENTIALS_USR} \
                        -Dnexus.password=${NEXUS_CREDENTIALS_PSW}
                """
            }
        }

        stage('Docker Build') {
            steps {
            script {
                docker.build("${DOCKER_IMAGE}:${env.BUILD_NUMBER}")
            }
            }
        }
        stage('Scan Docker Image') {
            steps {
            script {
                docker.withRegistry('https://index.docker.io/v1/', "${DOCKERHUB_CREDENTIALS}") {
                def image = docker.image("${DOCKER_IMAGE}:${env.BUILD_NUMBER}")
                image.inside {
                    sh 'trivy image --exit-code 1 --severity HIGH,CRITICAL ${DOCKER_IMAGE}:${env.BUILD_NUMBER}'
                }
                }
            }
            }
        }
        stage('Push Docker Image to Docker Hub') {
            steps {
                script {
                    docker.withRegistry('https://index.docker.io/v1/', "${DOCKERHUB_CREDENTIALS}") {
                        docker.image("${DOCKER_IMAGE}:${env.BUILD_NUMBER}").push()
                    }
                }
            }
        }

        stage('Helm Deploy to Kubernetes') {
            steps {
                withCredentials([file(credentialsId: "${KUBECONFIG_CREDENTIALS}", variable: 'KUBECONFIG')]) {
                    sh """
                        helm upgrade --install your-release ${HELM_CHART_PATH} \
                        --set image.repository=${DOCKER_IMAGE} \
                        --set image.tag=${env.BUILD_NUMBER}
                    """
                }
            }
        }
    }
}